import  { Bodies, Body,Composite, Constraint, Engine, Events, Mouse, MouseConstraint, Render, Runner } from "matter-js";


export default class Animation{
	public runner = Runner.create();
	public engine = Engine.create({
		gravity:{
			scale: 0,
		}
	});
	public render: Render;
	private mouse: Mouse;
	private mouseConstraint : MouseConstraint;
	private canvas: HTMLCanvasElement;

	constructor(canvas: HTMLCanvasElement){
		this.canvas = canvas,
		this.render = Render.create({
		  canvas: canvas,
		  engine: this.engine,
		  options: {
			wireframes: true,
			background: 'transparant',
			showIds: true,
			width: canvas.width,
			height: canvas.height,
		  }
		});
		this.mouse = Mouse.create(this.render.canvas)
		this.mouseConstraint = MouseConstraint.create(this.engine, {
			mouse: this.mouse,
			constraint: {
				stiffness: 0.2,
				render: {
					visible: false,
				}
			}
		});
	}

	public terminate(){
		Render.stop(this.render)
		Runner.stop(this.runner)
		Engine.clear(this.engine)
	}

	public start(){
		this.canvas.width = 1200;
		this.canvas.height = 800;
		this.render.mouse = this.mouse;
		Render.run(this.render);
		Runner.run(this.runner, this.engine);
	}

	public connectEvent(){
		let body: Body;
		Events.on(this.mouseConstraint,"startdrag", (e: Matter.IEvent<MouseConstraint>)=>{
			body = e.source.body;
			console.log("startdrag "+ body.label);
			
		})

		Events.on(this.mouseConstraint,"enddrag", ()=>{
			const newCompo = customCompostie(body)
			const composites = Composite.allComposites(this.engine.world);
			console.log(composites);
			
			Composite.add(this.engine.world, newCompo)

		})
	}

	public demo(){
		Composite.add(this.engine.world, [this.mouseConstraint, boxA, ground]);
	}

}

function customCompostie(targetBody: Body){
	const point = targetBody.position
	const compo = Composite.create({label: "compositeCircle"})
	for (let i = 1; i < 360; i += 40){
		const radian = (Math.PI / 180) * i
		const newPoint = {x: Math.cos(radian)* 100 + point.x, y: Math.sin(radian) * 100 + point.y}
		const newBody = Bodies.rectangle(
			newPoint.x, newPoint.y, 40, 40, 
			{
				...draggable,
				chamfer: {
					radius: 20
				} 
			}
		)
		Composite.add(compo, [ newBody])
	}



	return compo
}

const draggable= {
	inertia: Infinity,
	frictionAir: 1,
}

const boxA = Bodies.rectangle(
	400, 300, 80, 80,
	{
		...draggable,
		label: "boxA",
	});

const boxB = Bodies.rectangle(
	450, 50, 80, 80, 
	{
		...draggable,
		label: "boxB",
	});
const ground = Bodies.rectangle(400, 610, 810, 60, {isStatic: true});
